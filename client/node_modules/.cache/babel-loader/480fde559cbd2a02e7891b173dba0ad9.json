{"ast":null,"code":"import _toConsumableArray from\"/home/clavier/Bureau/nutrifruits/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/clavier/Bureau/nutrifruits/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// import React, { useState, useEffect } from \"react\";\n// import queryString from 'query-string';\n// import io from \"socket.io-client\";\n// import './Chat.css';\n// import TextContainer from '../TextContainer/TextContainer';\n// import Messages from '../Messages/Messages';\n// import InfoBar from '../InfoBar/InfoBar';\n// import Input from '../Input/Input';\n// let socket;\n// const Chat = ({ location }) => {\n//   const [name, setName] = useState('');\n//   const [room, setRoom] = useState('');\n//   const [users, setUsers] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const ENDPOINT = 'localhost:5000';\n//   useEffect(() => {\n//     const { name, room } = queryString.parse(location.search);\n//     socket = io(ENDPOINT);\n//     setRoom(room);\n//     setName(name)\n//     socket.emit('join', { name, room }, (error) => {\n//       if(error) {\n//         alert(error);\n//       }\n//     });\n//   }, [ENDPOINT, location.search]);\n//   useEffect(() => {\n//     socket.on('message', message => {\n//       setMessages(messages => [ ...messages, message ]);\n//     });\n//     socket.on(\"roomData\", ({ users }) => {\n//       setUsers(users);\n//     });\n// }, []);\n//   const sendMessage = (event) => {\n//     event.preventDefault();\n//     if(message) {\n//       socket.emit('sendMessage', message, () => setMessage(''));\n//     }\n//   }\n//   return (\n//     <div className=\"outerContainer\">\n//       <div className=\"container\">\n//           <InfoBar room={room} />\n//           <Messages messages={messages} name={name} />\n//           <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n//       </div>\n//       <TextContainer users={users}/>\n//     </div>\n//   );\n// }\n// export default Chat;\n// ---------------\nimport React,{useState,useEffect}from\"react\";import queryString from\"query-string\";import io from\"socket.io-client\";import\"./Chat.css\";import InfoBar from\"./InfoBar/InfoBar\";import TextContainer from\"./TextContainer/TextContainer\";import Messages from\"./Messages/Messages\";import Input from\"./Input/Input\";import{withRouter}from\"react-router-dom\";var socket;var Chat=function Chat(_ref){var location=_ref.location;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),room=_useState4[0],setRoom=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),users=_useState6[0],setUsers=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),message=_useState8[0],setMessage=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),messages=_useState10[0],setMessages=_useState10[1];// const ENDPOINT = 'http://localhost:3030';\nvar ENDPOINT=\"https://ecommerce-app-test.herokuapp.com/\";useEffect(function(){// les data que l'utilisateur a entré dans les queries\n// une methode du package queryString\n// const data = queryString.parse(location.search);\nvar _queryString$parse=queryString.parse(location.search),room=_queryString$parse.room,name=_queryString$parse.name;socket=io(ENDPOINT);setName(name);setRoom(room);socket.emit(\"join\",{name:name,room:room},function(){});return function(){socket.emit(\"disconnect\");socket.off();};},//la suite indique quand le useEffect prendra effet donc\n// quand les valeurs de endpoint et location.search changeront\n[ENDPOINT,location.search]);useEffect(function(){//ajoute tous les nouveaux messages dans le tableau des messages\nsocket.on(\"message\",function(message){setMessages([].concat(_toConsumableArray(messages),[message]));});socket.on(\"roomData\",function(_ref2){var users=_ref2.users;setUsers(users);});},//indique 'seulement comme le tableaux messages change'\n[messages]);//fonction pour envoyer des messages\nvar sendMessage=function sendMessage(event){event.preventDefault();if(message){socket.emit(\"sendMessage\",message,function(){return setMessage(\"\");});}};return/*#__PURE__*/React.createElement(\"div\",{className:\"outerContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"container\"},/*#__PURE__*/React.createElement(InfoBar,{room:room}),/*#__PURE__*/React.createElement(Messages,{messages:messages,name:name}),/*#__PURE__*/React.createElement(Input,{message:message,setMessage:setMessage,sendMessage:sendMessage})))// <div className='outerContainer'>\n//   <div className='container'>\n//     <InfoBar />\n//     <input\n//       value={messages}\n//       onChange={(event) => setMessage(event.target.value)}\n//       // envoi avec la touche entrée\n//       onKeyPress={(event)=> event.key ==='Enter' ? sendMessage(event) : null}\n//     />\n//   </div>\n// </div>\n;};export default withRouter(Chat);","map":{"version":3,"sources":["/home/clavier/Bureau/nutrifruits/client/src/Components/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","TextContainer","Messages","Input","withRouter","socket","Chat","location","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","off","on","sendMessage","event","preventDefault"],"mappings":"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","sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import queryString from 'query-string';\n// import io from \"socket.io-client\";\n// import './Chat.css';\n\n// import TextContainer from '../TextContainer/TextContainer';\n// import Messages from '../Messages/Messages';\n\n// import InfoBar from '../InfoBar/InfoBar';\n// import Input from '../Input/Input';\n\n// let socket;\n\n// const Chat = ({ location }) => {\n//   const [name, setName] = useState('');\n//   const [room, setRoom] = useState('');\n//   const [users, setUsers] = useState('');\n//   const [message, setMessage] = useState('');\n//   const [messages, setMessages] = useState([]);\n//   const ENDPOINT = 'localhost:5000';\n\n//   useEffect(() => {\n//     const { name, room } = queryString.parse(location.search);\n\n//     socket = io(ENDPOINT);\n\n//     setRoom(room);\n//     setName(name)\n\n//     socket.emit('join', { name, room }, (error) => {\n//       if(error) {\n//         alert(error);\n//       }\n//     });\n//   }, [ENDPOINT, location.search]);\n\n//   useEffect(() => {\n//     socket.on('message', message => {\n//       setMessages(messages => [ ...messages, message ]);\n//     });\n\n//     socket.on(\"roomData\", ({ users }) => {\n//       setUsers(users);\n//     });\n// }, []);\n\n//   const sendMessage = (event) => {\n//     event.preventDefault();\n\n//     if(message) {\n//       socket.emit('sendMessage', message, () => setMessage(''));\n//     }\n//   }\n\n//   return (\n//     <div className=\"outerContainer\">\n//       <div className=\"container\">\n//           <InfoBar room={room} />\n//           <Messages messages={messages} name={name} />\n//           <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n//       </div>\n//       <TextContainer users={users}/>\n//     </div>\n//   );\n// }\n\n// export default Chat;\n\n// ---------------\n\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport \"./Chat.css\";\nimport InfoBar from \"./InfoBar/InfoBar\";\n\nimport TextContainer from \"./TextContainer/TextContainer\";\nimport Messages from \"./Messages/Messages\";\n\nimport Input from \"./Input/Input\";\nimport { withRouter } from \"react-router-dom\";\n\nlet socket;\n\nconst Chat = ({ location }) => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [users, setUsers] = useState(\"\");\n\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  // const ENDPOINT = 'http://localhost:3030';\n  const ENDPOINT = \"https://ecommerce-app-test.herokuapp.com/\";\n\n  useEffect(\n    () => {\n      // les data que l'utilisateur a entré dans les queries\n      // une methode du package queryString\n      // const data = queryString.parse(location.search);\n      const { room, name } = queryString.parse(location.search);\n\n      socket = io(ENDPOINT);\n\n      setName(name);\n      setRoom(room);\n\n      socket.emit(\"join\", { name, room }, () => {});\n\n      return () => {\n        socket.emit(\"disconnect\");\n        socket.off();\n      };\n    }, //la suite indique quand le useEffect prendra effet donc\n    // quand les valeurs de endpoint et location.search changeront\n    [ENDPOINT, location.search]\n  );\n\n  useEffect(\n    () => {\n      //ajoute tous les nouveaux messages dans le tableau des messages\n      socket.on(\"message\", (message) => {\n        setMessages([...messages, message]);\n      });\n\n      socket.on(\"roomData\", ({ users }) => {\n        setUsers(users);\n      });\n    },\n    //indique 'seulement comme le tableaux messages change'\n    [messages]\n  );\n\n  //fonction pour envoyer des messages\n  const sendMessage = (event) => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar room={room} />\n        <Messages messages={messages} name={name} />\n        <Input\n          message={message}\n          setMessage={setMessage}\n          sendMessage={sendMessage}\n        />\n      </div>\n      {/* <TextContainer users={users} /> */}\n    </div>\n\n    // <div className='outerContainer'>\n    //   <div className='container'>\n    //     <InfoBar />\n    //     <input\n    //       value={messages}\n    //       onChange={(event) => setMessage(event.target.value)}\n    //       // envoi avec la touche entrée\n    //       onKeyPress={(event)=> event.key ==='Enter' ? sendMessage(event) : null}\n    //     />\n    //   </div>\n    // </div>\n  );\n};\n\nexport default withRouter(Chat);\n"]},"metadata":{},"sourceType":"module"}